\section{Continuum Forcing Method}
In this implementation of the immersed boundary, a forcing equation is added to the continuous governing equation \eqref{eq:C3_momentum} to represent the effect of the boundary. The continuous IB technique is the original method developed by Peskin \cite{peskin1972flow} for coupled simulation of blood flow due to the contraction of heart muscle. In this approach, the immersed boundary is represented by a set of elastic fibers; their locations are tracked in a Lagrangian fashion by a collection of massless points. These points move with the local fluid velocity. Therefore, the location of the $k$-th Lagrangian point, $X_k$, is governed by the following equation
%
\begin{equation}
    \frac{\partial X_k}{\partial t} = u(X_k, t)
\end{equation}
%
Where $u$ is the velocity of the fluid at location $X_k$. The location of fluid nodes, $x$, does not necessarily coincide with the location of the Lagrangian points. Thus, it is required to map the velocities from the Eulerian domain, where the fluid's equations of motion are solved, to Lagrangian nodes. In a pure continuum problem, this can be done using the Dirac delta functions. The property of the Dirac delta function that enables the mapping between the Euler and Lagrangian domains is shown in the following equation.
%
\begin{equation}
    \int_{\Omega_f} f(x) \delta(x - X_k) d\Omega = f(X_k)
\end{equation}
%
As can be seen here, by convolving the function of interest and the delta function, we can evaluate our function of interest at any location where the delta function is defined. Although this is the central idea of mapping data to the Lagrangian domain, this approach becomes unstable in practice \cite{lee2003stability}. In the practical implementation of immersed boundary method, the effect of the delta function needs to be expanded to a couple of nodes around $X_k$. This is achieved by relaxing the delta function. The relaxed delta function is referred to as regularized delta function \cite{shin2008assessment}. The regularized delta function is defined using Equation \eqref{eq:C3_regularizedDeltaFunction} in three dimensions.
%
\begin{equation}\label{eq:C3_regularizedDeltaFunction}
    \delta_h(x_1, x_2, x_3) = \frac{1}{dx_1 \cdot dx_2 \cdot dx_3}
                               \phi \left( \frac{x_1 - \eta_1}{dx_1} \right)
                               \phi \left( \frac{x_2 - \eta_2}{dx_2} \right)
                               \phi \left( \frac{x_2 - \eta_3}{dx_3} \right)
\end{equation}
%
where $x_i$ is the spatial coordinate in each direction, $\eta_i$ is the location where the delta function is defined, and $dx_i$ is the grid size in each direction. In the above equation $i$ can be $1$, $2$, or $3$. The $\phi$ function is defined in Equation \eqref{eq:C3_phiFunction}. As shown here, there are different ways of defining this function. The input of $\phi$ function is $r$ which is defined as $(x_i - \eta_i) / dx_i$.
%
\begin{subequations}\label{eq:C3_phiFunction}
\begin{equation}\label{eq:C3_phiFunction_2point}
    \phi(r) = 
    \begin{cases}
    1 - |r| \quad &|r| \leq 1 \\
    0    \quad &\text{otherwise}
    \end{cases}
\end{equation}
\begin{equation}\label{eq:C3_phiFunction_3point}
    \phi(r) = 
    \begin{cases}
        \frac{1}{3} \left( 1 + \sqrt{-3r^2 + 1} \right) \quad &|r| \leq 0.5 \\
        \frac{1}{6} \left( 5 - 3|r| - \sqrt{-3(1 - |r|)^2 + 1} \right) & 0.5 \geq |r| \leq 1.5 \\
        0 & \text{otherwise}
    \end{cases}
\end{equation}
\begin{equation}\label{eq:C3_phiFunction_4point}
    \phi(r) = 
    \begin{cases}
        \frac{1}{8}
        \left(
        3 - 2|r| + \sqrt{1 + 4|r| - 4r^2}
        \right) \quad &0 \leq |r| \leq 1
        \\
        \frac{1}{8}
        \left(
        5 - 2|r| + \sqrt{-7 + 12|r| - 4r^2}
        \right) \quad &1 \leq |r| \leq 2
        \\
        0 &\text{otherwise}
    \end{cases}
\end{equation}
\begin{equation}\label{eq:C3_phiFunction_6point}
    \phi(r) = 
    \begin{cases}
        \begin{split}
        \frac{61}{112} - \frac{11}{42} |r| - \frac{11}{56} |r|^2 + \frac{1}{12} |r|^3 + 
        \frac{\sqrt{3}}{336}
        \left( 243 + 1584 |r| \right. \\
        \left. - 748 |r|^2 - 1560 |r|^3 + 500 |r|^4 + 336 |r|^5 - 112 |r|^6
        \right)^{1/2}
        \end{split} \quad & 0 \leq |r| \leq 1
        \\
        \frac{21}{16} + \frac{7}{12} |r| - \frac{7}{8} |r|^2 + \frac{1}{6} |r|^3 - 
        \frac{3}{2} \phi \left( |r| - 1 \right) & 1 \leq |r| \leq 2
        \\
        \frac{9}{8} - \frac{23}{12} |r| + \frac{3}{4} |r|^2 - \frac{1}{12} |r|^3 + 
        \frac{1}{2} \phi \left( |r| - 2 \right) & 2 \leq |r| \leq 3
        \\
        0 & \text{otherwise}
    \end{cases}
\end{equation}
\end{subequations}
%
Equation \eqref{eq:C3_phiFunction_2point} is the 2-point delta function that calculates the linear interpolation between the points \cite{saiki1996numerical}. Equation \eqref{eq:C3_phiFunction_3point} shows the 3-point delta function used by Roma et al. \cite{roma1999adaptive} and Equations \eqref{eq:C3_phiFunction_4point} and \eqref{eq:C3_phiFunction_6point}, used by Peskin \cite{peskin2002immersed} are 4-point and 6-point delta functions, respectfully. The comparison between the shape of different $\phi(r)$ functions are shown in Figure \ref{fig:C3_phi_function}.
%
\begin{figure}[H]
    \centering
    \includegraphics[width=14.cm]{Chapter_3/figure/phi_function.eps}
    \caption{Comparison between different formulations of $\phi$}
    \label{fig:C3_phi_function}
\end{figure}
%
Now we can write the mapping from the Eulerian nodes of the fluid solver to Lagrangian nodes as shown in Equation \eqref{eq:C3_lagrange2euler}.
%
\begin{equation}\label{eq:C3_lagrange2euler}
    u(X_k) = \int_\Omega u(x) \delta(x - X_k) dx
\end{equation}
%
Where $\Omega$ is the computational domain, $u(x)$ is the velocity at the Eulerian nodes, $x$ is the Eulerian nodes coordinate, $u(X_k)$ is the velocity at the desired Lagrangian node, and $X_k$ is the coordinate of the Lagrangian node. Most continuum forcing approaches are the same up to this point. They differ depending on the way they calculate the forcing terms.
% -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-Classical IB method
\subsection{Classical IB Method}
In the classical IB method, the forces at the immersed boundaries are calculated using appropriate constitutive laws, i.e. Hooke's law. This can be expressed as follows.
%
\begin{equation}
    f(X_k) = \mathcal{M}(X_k)
\end{equation}
%
Where $\mathcal{M}$ is an operator that describes the properties of the boundaries. This force is calculated at the Lagrangian points and needs to be transferred back to the Eulerian nodes. This is done using the same delta functions mentioned previously to map the Eulerian results to Lagrangian. This method is well suited for a case of elastic bodies; but, it will fail for the cases of rigid boundaries or when the rigidity of boundaries is much more than the fluid. The origin of this problem is due to the high cycle oscillations that occur near the boundaries.

This approach is applied to the demonstration problem defined in Section \ref{sec:C3_benchmark_case}. We modelled the location of the fixed boundary using the classical IB method and verified the results using analytical formulas for this problem. The forcing function is added to the right-hand-side of the governing equation as follows.
%
\begin{equation}
    \frac{\partial u}{\partial t} = \frac{\partial^2 u}{\partial y^2} - f(t)
\end{equation}
%
Where $f(t)$ is the forcing function using to model the boundary. This equation is discretized using the Crank-Nicholson method as:
%
\begin{equation}\label{eq:C3_discretizedEquationPeskinIB}
    u^{n+1} = u^{n} + \frac{\Delta t}{2} \left( \frac{\partial^2 u^{n+1}}{\partial x^2} + 
                                                \frac{\partial^2 u^n}{\partial x^2}\right) - \Delta t f^n 
\end{equation}
%
The steps to solve this equation and model the stationary wall using the IB method are as follows:
%
\begin{enumerate}
    \item Define the initial condition as $u^0$ and set $f^0$ equal to zero
    \item Calculate the velocity at the following time step, $u^1$, using Equation \eqref{eq:C3_discretizedEquationPeskinIB}
    \item Based on the new velocity at $n=1$, calculate the velocity at the location where the stationary wall is supposed to be, $X$, using $\delta$ function ($U$)
    \item Calculate the distance that this node will move in the current time step: $X^{n+1} = X^n + U \Delta t$
    \item Based on the new location of the node, calculate the forces as: $F = K \left( X^{n+1} - X^0 \right)$, where $X^0$ is the desired location of the wall and $K$ is the stiffness of wall.
    \item Map the force at the Lagrangian location $X$ to its neighbouring Eulerian points using $\delta$ function
    \item Reiterate until the convergence is satisfied
\end{enumerate}
%
For the classical IB method, the accuracy of the results to the number of nodes, wall velocity, and stiffness used to model the wall is investigated. The immersed boundary simulation is compared with the analytical solution of this problem. I chose the normalized root mean square error to compare the analytical and IB results.

For the first investigation, I selected the wall stiffness as $10^2$ and its location selected as $x_{wall} = 0.51885$. We chose this location so that it does not coincide with the location of computational nodes. The time step is chosen as $10^{-5}$ and the wall velocity is fixed at $1 m/s$. For this simulation, we used both 2-point and 4-point delta functions to transfer results between Lagrangian and Eulerian nodes. The computation domain is discretized using $11$, $41$, $81$, and $161$ nodes. The results of IB method is verified with analytical results.
%
\begin{figure}[H]
    \centering
    \subfigure[N = 11, 2-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_2point_11.eps}
    }
    \quad
    \subfigure[N = 11, 4-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_4point_11.eps}
    }
    \\
    \subfigure[N = 41, 2-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_2point_41.eps}
    }
    \quad
    \subfigure[N = 41, 4-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_4point_41.eps}
    }
    \\
    \subfigure[N = 81, 2-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_2point_81.eps}
    }
    \quad
    \subfigure[N = 81, 4-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_4point_81.eps}
    }
    \\
    \subfigure[N = 161, 2-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_2point_161.eps}
    }
    \quad
    \subfigure[N = 161, 4-point delta function]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_nodeNumber_4point_161.eps}
    }
    \caption{Comparison between IB and analytical results for different number of nodes and delta functions for Couette flow problem.}
    \label{fig:C3_classicalIBResultNodeNumber}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c | c}
      & \multicolumn{2}{c}{RMSE value} \\ \hline
     Number of nodes & 2-point delta function & 4-point delta function \\ \hline \hline
     11 & 0.0105 & 0.0292 \\ \hline
     41 & 0.0035 & 0.002 \\ \hline
     81 & 0.0026 & 0.0022 \\ \hline
     161 & 0.00023 & 0.0002 \\
\end{tabular}
\caption{RMSE values for different number of nodes and delta functions.}
\label{table:C3_classicalIBResultNodeNumberRMSE}
\end{table}
%
As shown in Figure \ref{fig:C3_classicalIBResultNodeNumber} and Table \ref{table:C3_classicalIBResultNodeNumberRMSE}, by increasing the number of nodes, the error in IB result decreases. However, changing the delta function from 2-point to 4-point does not significantly affect the accuracy of the solution. The higher order delta function can also reduce the accuracy of the solution for a very low number of nodes (here 11). 

For the second investigation we looked at the effect of changing the moving wall velocity on the solution accuracy. For this simulation we fixed the number of nodes to 81, set the stiffness value to $10^2$, the wall location at $0.51885$, and the time step as $10^{-5}$. For this problem we only focused on 2-point delta function. We chose the wall velocity as $10 m/s$, $10^2 m/s$, $10^3 m/s$, and $10^4 m/s$. As shown in Figure \ref{fig:C3_classicalIBResultWallVelocity} and Table \ref{table:C3_classicalIBResultWallVelocityRMSE}, the method is capable of handling flow with different velocities without a loss in accuracy of the results. However, the simulation time grows with increases in wall velocity.
%
\begin{figure}[H]
    \centering
    \subfigure[$u_{wall} = 10 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallVelocity_2point_10.eps}
    }
    \quad
    \subfigure[$u_{wall} = 10^2 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallVelocity_2point_100.eps}
    }
    \\
    \subfigure[$u_{wall} = 10^3 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallVelocity_2point_1000.eps}
    }
    \quad
    \subfigure[$u_{wall} = 10^4 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallVelocity_2point_10000.eps}
    }
    \caption{Comparison between IB and analytical results for different wall velocities.}
    \label{fig:C3_classicalIBResultWallVelocity}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c}
     Wall velocity (m/s) & RMSE \\ \hline \hline
     10 & 0.0024\\ \hline
     $10^2$ & 0.0024 \\ \hline
     $10^3$ & 0.0024 \\ \hline
     $10^4$ & 0.0024 \\
\end{tabular}
\caption{RMSE values for different wall velocities.}
\label{table:C3_classicalIBResultWallVelocityRMSE}
\end{table}
%
For the last case study of classical IB method, we looked at the effect of the wall stiffness on the accuracy of the solution. For this case, we fixed the wall location at $x_{wall} = 0.51885$ and defined the wall velocity as $10 m/s$. The time step is selected as $10^{-5} s$. We looked at the wall stiffness of $0.1 N/m$, $1 N/m$, $10 N/m$, and $100 N/m$. As shown in Figure \ref{fig:C3_classicalIBResultWallStiffness} and Table \ref{table:C3_classicalIBResultWallStiffnessRMSE}, wall stiffness has a considerable effect of the solution result. Therefore, a convergence study for the wall stiffness value is usually required if one wants to model the stiff boundaries.
%
\begin{figure}[H]
    \centering
    \subfigure[$K_{wall} = 0.1 N/m$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallStiffness_2point_01.eps}
    }
    \quad
    \subfigure[$K_{wall} = 1 N/m$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallStiffness_2point_1.eps}
    }
    \\
    \subfigure[$K_{wall} = 10 N/m$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallStiffness_2point_10.eps}
    }
    \quad
    \subfigure[$K_{wall} = 100 N/m$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/classicalIB_wallStiffness_2point_100.eps}
    }
    \caption{Comparison between IB and analytical results for different wall stiffness values.}
    \label{fig:C3_classicalIBResultWallStiffness}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c}
     Wall stiffness (N/m) & RMSE \\ \hline \hline
     0.1 & 0.1912 \\ \hline
     1 & 0.1759  \\ \hline
     10 & 0.0665 \\ \hline
     100 & 0.001 \\
\end{tabular}
\caption{RMSE values for different wall stiffness values.}
\label{table:C3_classicalIBResultWallStiffnessRMSE}
\end{table}
% -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
\subsection{Virtual Boundary Method}
The virtual boundary method is a different approach to imposing the effect of immersed boundary through force terms. This method is well suited for both the rigid and elastic boundaries. The difference between this approach and the classical IB method is that it does not require the solution of the constitutive equations to calculate the force terms. This method is based on the work of Goldstein et al. \cite{goldstein1993modeling} to simulate the flow around the rigid bodies. The forcing term in the virtual boundary method is defined as
%
\begin{equation}\label{eq:C3_virtualBoundaryMethod}
    F(X_k, t) = 
    \alpha \int_0^t \left[ u(X_k, t) - U(X_k, t) \right] dt + 
    \beta \left[ u(X_k, t) - U(X_k, t) \right]
\end{equation}
%
where $F$ is the required force at the $k$-th Lagrangian point, $u(X_k, t)$ is the velocity calculated from the Eulerian nodes using the $\delta$ function, and $U(X_k)$ is the desired velocity at the Lagrangian point $X_k$. The coefficient $\alpha$ and $\beta$ are selected to best enforce the boundary condition at the immersed solid boundary, this is done by doing convergence studies on these values. Equation \eqref{eq:C3_virtualBoundaryMethod} is essentially a way to provide feedback control to the system to make sure that the desired velocity ($U(X_k, t)$) is achieved at the immersed boundary. From a physical standpoint, this equation represents a damped oscillator \cite{iaccarino2003immersed}.

As before, we apply this technique to the demonstration problem defined in Section \ref{sec:C3_benchmark_case}. We use the Crank-Nicholson method to discretize the equations as shown in the following equation:
%
\begin{equation}\label{eq:C3_virtualBoundaryDiscretization}
    \frac{u^{n+1} - u^n}{\Delta t} = 
    \frac{1}{2}
    \left(
    \frac{\partial^2 u^{n+1}}{\partial x^2} +
    \frac{\partial^2 u^{n}}{\partial x^2}
    \right)
\end{equation}
%
Where $n$ is the current time step. The steps to solve this problem using the virtual boundary method can be defined as follows
%
\begin{enumerate}
    \item Define the initial condition as $u^0$ and set $f^0$ equal to zero
    \item Calculate the velocity at the next time step, $u^1$, using Equation \eqref{eq:C3_discretizedEquationPeskinIB}
    \item Map the velocity results to the Lagrangian nodes using the $\delta$ function
    \item Based on the new velocity at $n=1$ evaluate Equation \eqref{eq:C3_virtualBoundaryMethod}
    \item Map the force at the Lagrangian location $X$ to its neighbouring Eulerian points using $\delta$ function
    \item Reiterate until the convergence is satisfied
\end{enumerate}
%
Comparing the virtual boundary method to the classical IB method, we can see that fewer steps are required for this formulation. Moreover, there is no need to solve the constitutive equation for the solid domain that reduces the total computational cost.

Like the classical IB method, we investigate the effect of mesh size, moving wall velocity, and values for $\alpha$ and $\beta$ constants of the solution accuracy. The numerical results are verified with the analytical solution of this problem. We use the RMSE value as a metric to compare the results.

We looked at the effect of mesh size on the solution accuracy of the virtual boundary method. For this case, the moving wall velocity is fixed at $10 m/s$ with the location of the fixed wall at $x_{wall} = 0.726$. The time step for this simulation is chosen as $10^{-5}$ with $\alpha = -1000$ and $\beta = -10$. We chose the number of nodes as $11$, $41$, $81$, and $161$. The total length of the domain is selected as $1 m$. As shown in Figure \ref{fig:C3_virtualBoundaryResultNodeNumber} and Table \ref{table:C3_virtualBoundaryResultNodeNumberRMSE}, by increasing the number of nodes. the simulation results become more accurate. However, the convergence is reached using less number of nodes compared to the classical IB method of the last section. This means that the computational effort to get the same accuracy compared to classical IB method is much less when using the virtual boundary method due to less number of computational nodes. 
%
\begin{figure}[H]
    \centering
    \subfigure[N = 11]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_nodeNumber_11.eps}
    }
    \quad
    \subfigure[N = 41]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_nodeNumber_41.eps}
    }
    \\
    \subfigure[N = 81]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_nodeNumber_81.eps}
    }
    \quad
    \subfigure[N = 161]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_nodeNumber_161.eps}
    }
    \caption{Comparison between IB and analytical results for different number of nodes.}
    \label{fig:C3_virtualBoundaryResultNodeNumber}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c }
     Number of nodes & RMSE \\ \hline \hline
     11 & 0.012 \\ \hline
     41 & 0.00065 \\ \hline
     81 & 0.00063 \\ \hline
     161 & 0.00058 \\
\end{tabular}
\caption{RMSE values for different number of nodes.}
\label{table:C3_virtualBoundaryResultNodeNumberRMSE}
\end{table}
%
We looked at the effect of wall velocity on the solution accuracy. As before, the length of the domain is fixed at $1 m$ with the wall defined at $x_{wall} = 0.726$ and the time step is chosen as $10^{-5}$. We chose the $\alpha$ and $\beta$ constants as $-1000$ and $-10$, respectively. We simulated the flow selecting the wall velocity as $10 m/s$, $100 m/s$, $1000 m/s$, and $10000 m/s$. The results are compared with the analytical results. As shown in Figure \ref{fig:C3_virtualBoundaryResultWallVelocity} and Table \ref{table:C3_virtualBoundaryResultWallVelocityRMSE}, the wall velocity does not affect the accuracy of the solution. When compared with the results of the classical IB method in the previous section, we can see that the virtual boundary method produces more accurate results. Moreover, the simulation time is much less than the classical IB method.
%
\begin{figure}[H]
    \centering
    \subfigure[$u_{wall} = 10 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_wallVelocity_10.eps}
    }
    \quad
    \subfigure[$u_{wall} = 10^2 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_wallVelocity_100.eps}
    }
    \\
    \subfigure[$u_{wall} = 10^3 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_wallVelocity_1000.eps}
    }
    \quad
    \subfigure[$u_{wall} = 10^4 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_wallVelocity_10000.eps}
    }
    \caption{Comparison between IB and analytical results for different wall velocities.}
    \label{fig:C3_virtualBoundaryResultWallVelocity}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c}
     Wall velocity (m/s) & RMSE \\ \hline \hline
     10 & 0.000616\\ \hline
     $10^2$ & 0.000616 \\ \hline
     $10^3$ & 0.000616 \\ \hline
     $10^4$ & 0.000616 \\
\end{tabular}
\caption{RMSE values for different wall velocities.}
\label{table:C3_virtualBoundaryResultWallVelocityRMSE}
\end{table}
%
Finally, we looked at the effect of constants $\alpha$ and $\beta$ on the accuracy of the solution. We discretized the domain using $81$ nodes with wall velocity equal to $100 m/s$ and time step equal to $10^{-5}$. The location of the fixed wall is chosen as $x_{wall} = 0.726$. The flow between the plates is modelled using different coefficients for $\alpha$ and $\beta$ as shown in Table \ref{table:C3_virtualBoundaryResultConstantRSME}.

As can be seen in Figure \ref{fig:C3_virtualBoundaryResultConstant} and Table \ref{table:C3_virtualBoundaryResultConstantRSME}, $\alpha$ value has a considerable effect on the accuracy of the results. Increasing the $\alpha$ value with an order of magnitude results in a considerable improvement in the accuracy of the solution. However, $\beta$ value does not contribute to the accuracy but improves the convergence of the solution. The solutions with larger $\beta$ values converged in less number of iterations.
%
\begin{figure}[H]
    \centering
    \subfigure[$\alpha = -10, \beta = -10$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_constant_alpha_10_beta_10.eps}
    }
    \quad
    \subfigure[$\alpha = -100, \beta = -10$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_constant_alpha_100_beta_10.eps}
    }
    \\
    \subfigure[$\alpha = -100, \beta = -1$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_constant_alpha_100_beta_1.eps}
    }
    \quad
    \subfigure[$\alpha = -100, \beta = -100$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/virtualBoundary_constant_alpha_100_beta_100.eps}
    }
    \caption{Comparison between IB and analytical results for different values for constants $\alpha$ and $\beta$.}
    \label{fig:C3_virtualBoundaryResultConstant}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c | c | c}
     Case number & $\alpha$ & $\beta$ & RMSE \\ \hline \hline
     1 & -10 & -10 & 0.0327 \\ \hline
     2 & -100 & -10 & 0.00138 \\ \hline
     3 & -100 & -1 & 0.00129 \\ \hline
     4 & -100 & -100 & 0.00346 \\
\end{tabular}
\caption{Different values used for investigating the effect of $\alpha$ and $\beta$.}
\label{table:C3_virtualBoundaryResultConstantRSME}
\end{table}
% -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
\subsection{Penalization Method}
The third class of continuum immersed boundary techniques are known as penalization method first introduced by Arquis and Caltagirone \cite{ arquis1984conditions}. In this method, the solid boundaries are modeled as porous media. Porosity, or void fraction, is a measure of the void spaces in a material and varies between 0 and 1. For the solid domain, the porosity value is near zero whereas its value is close to one in the fluid domain. Flow through a porous domain is described using the Darcy's law. This is a simple proportional relationship between the instantaneous discharge rate through a porous medium, the viscosity of the fluid, and the pressure drop.
%
\begin{figure}[H]
    \centering
    \includegraphics[width=14.cm]{Chapter_3/figure/Darcys_Law.png}
    \caption{Flow through a porous pipe.}
    \label{fig:C3_darcyEquationPipe}
\end{figure}
%
For flow through a porous domain in a pipe shown in Figure \ref{fig:C3_darcyEquationPipe}, Darcy's law is written as
%
\begin{equation}\label{eq:C3_DarcysLaw}
    Q = \frac{\kappa A \Delta p}{\mu L}
\end{equation}
%
where $Q$ is the total flow discharge, $\kappa$ is the permeability of the domain, $\Delta p$ is the pressure drop due to the porosity between two ends of the pipe, $\mu$ is the fluid's viscosity, and $L$ is the length of the domain. Darcy's law can be considered as a relation between the flow velocity and pressure drop. This pressure drop is used in the penalization method to represent the solid boundaries by modelling the force term using Equation \eqref{eq:C3_DarcysLaw}. The force term is defined as follows:
%
\begin{equation}\label{eq:C3_forceTermIBpenelization}
    f = - \mathcal{H}(\mathcal{X}) \frac{\mu}{\kappa} v
\end{equation}
%
Where $v$ is is the velocity of the flow. To apply the force term to only the region inside the solid boundary, the penalization force is multiplied by a Heaviside function, $\mathcal{H}(\mathcal{X})$, that is a function of the relative distance of the points in the domain to the boundary of the solid region. The Heaviside function $\mathcal{H}$ has the value of \emph{one} for all points inside the solid boundary and is \emph{zero} for points outside the boundary. This will give us a zero forcing term for points outside the solid boundary and non-zero for points inside. Therefore, the pressure drop is only applied to the points inside the solid domain. This is explained in more detail in the following example.

Assume that the solid boundary is a circle located at $(1,2)$ with a radius of $2$. This curve is defined using Equation \eqref{eq:C3_circle}.
%
\begin{equation}\label{eq:C3_circle}
    (x - 1)^2 + (y - 2)^2 = 4
\end{equation}
%
The relative location of an arbitrary point $x_0 = (\eta, \rho)$ to this boundary is determined using the following equation,
%
\begin{equation}
    \mathcal{X}(\eta, \rho) = 4 - (\eta - 1)^2 - (\rho - 2)^2
\end{equation}
%
Depending on the sign of $\mathcal{X}$, we can make the following conclusions:
%
\begin{equation}
\begin{cases}
    \mathcal{X} > 0 \quad \text{$x_0$ is inside the solid boundary} \\
    \mathcal{X} < 0 \quad \text{$x_0$ is outside the solid boundary} \\
    \mathcal{X} = 0 \quad \text{$x_0$ is on the boundary}
\end{cases}
\end{equation}
%
The sign of $\mathcal{X}$ divides the physical domain into three regions. To use this function for force term assignment to mesh cell, we need to convert its values to $0$ and $1$. The force terms outside the solid boundaries are multiplied by zero whereas the force terms inside the solid boundary are multiplied by one. This is done by feeding the values of function $\mathcal{X}(x)$ to a Heaviside function, $\mathcal{H}$. The Heaviside function, or the unit step function, is a discontinuous function whose value is zero for negative and one for positive values of $x$ as shown in Figure \ref{fig:C3_heavisideFunction}.
%
\begin{figure}[H]
    \centering
    \includegraphics[width=14.cm]{Chapter_3/figure/Heaviside_Function.eps}
    \caption{The Heaviside function.}
    \label{fig:C3_heavisideFunction}
\end{figure}
%
By Heaviside function acting on $\mathcal{X}$, we get the value of one for nodes inside the solid boundary and zero for outside nodes. These are then multiplied to the force terms calculated using Equation \eqref{eq:C3_forceTermIBpenelization}. This enables us to apply the force term only within the solid domain. This method is applied to the demonstration problem of Section \ref{sec:C3_benchmark_case}. For this problem, we looked at the effect of the number of mesh cells, wall velocity, and the permeability value on the accuracy of the method. The results are compared with analytical results for this problem like the previous sections.

For the first set of results, we looked at the effect of mesh size on the accuracy of the solution. The domain length is chosen as $1.0 m$ where the position of the fixed wall is selected as $0.6125$. We chose this so that the computational nodes won't coincide the with the wall location. This better represents the application of the IB method. We chose the number of nodes as 11, 41, 81, and 161. As shown in Figure \ref{fig:C3_penalizationResultNodeNumber}, as we increase the number of nodes, the total error between the numerical and analytical results decreases. For the Case where there is a computational node exactly on top of the location for the stationary wall ($n=161$), the two results match perfectly. The IB results are shown using the solid line and the analytical results are represented using white circles.
%
\begin{figure}[H]
    \centering
    \subfigure[n = 11]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_nodeNumber_11.eps}
    }
    \quad
    \subfigure[n = 41]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_nodeNumber_41.eps}
    }
    \\
    \subfigure[n = 81]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_nodeNumber_81.eps}
    }
    \quad
    \subfigure[n = 161]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_nodeNumber_161.eps}
    }
    \caption{Comparison between IB and analytical results for different number of nodes.}
    \label{fig:C3_penalizationResultNodeNumber}
\end{figure}
%
The RSME value was used to compare the IB to the analytical results as shown in Table \ref{table:C3_penalizationResultNodeNumberRMSE}.
%
\begin{table}[H]
\centering
\begin{tabular}{c | c}
    Number of nodes & RMSE value \\ \hline \hline
    11 & 0.0624 \\ \hline
    41 & 0.0139 \\ \hline
    81 & 0.005 \\ \hline
    161 & 0.001
\end{tabular}
\caption{RMSE values for different number of nodes.}
\label{table:C3_penalizationResultNodeNumberRMSE}
\end{table}
%
As can be seen in Table \ref{table:C3_penalizationResultNodeNumberRMSE}, even for $n = 161$, the RMSE value is not zero. This is because in the penalization method, even for low values of porosity, there is still a small flow going through the solid domain.

For the subsequent investigation, we look at the effect of the different velocity of the moving wall on the accuracy of the penalization method. For this analysis, we defined the fixed wall at $x=0.4325$ and discretized the domain using $81$ nodes. The inlet velocity is selected as $1$, $10$, $100$, and $1000$. To verify the methodology, we compared the IB with analytical results. We chose the time step as $10^{-5}$ and the porosity value as $\kappa = 10^{-5}$. As shown in Figure \ref{fig:C3_penalizationResultInletVelocity} and the RMSE values in Table \ref{table:C3_penalizationResultInletVelocityRMSE}, the inlet velocity does not affect the accuracy of the response. Moreover, all of these simulations are done using the same time step and porosity value.
%
\begin{figure}[H]
    \centering
    \subfigure[$U_{in} = 1 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_inletVelocity_1.eps}
    }
    \quad
    \subfigure[$U_{in} = 10 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_inletVelocity_10.eps}
    }
    \\
    \subfigure[$U_{in} = 100 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_inletVelocity_100.eps}
    }
    \quad
    \subfigure[$U_{in} = 1000 m/s$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_inletVelocity_1000.eps}
    }
    \caption{Comparison between IB and analytical results for different inlet velocities.}
    \label{fig:C3_penalizationResultInletVelocity}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c}
    Inlet velocity (m/s) & RMSE value \\ \hline \hline
    1 & 0.0056 \\ \hline
    10 & 0.0056 \\ \hline
    100 & 0.0056 \\ \hline
    1000 & 0.0056
\end{tabular}
\caption{RMSE values for different inlet velocities.}
\label{table:C3_penalizationResultInletVelocityRMSE}
\end{table}
%
Finally, we looked at the effect of porosity values on the accuracy of the simulation. For this purpose, we fixed the wall location at $x_{wall} = 0.435$ and defined the velocity of the moving wall as $10 m/s$. The length of the domain is selected as $1 m$ and discretized using 81 nodes. We chose the time step as $10^{-5}$. We investigated the accuracy of penalization method to porosity values of $10^{-2}$, $10^{-3}$, $10^{-4}$, $10^{-5}$ by comparing the IB simulation with analytical results. The results shown in Figure \ref{fig:C3_penalizationResultPorosity} and Table \ref{table:C3_penalizationResultPorosityRMSE} displays the strong dependency of the simulation results of the porosity, $\kappa$, value. Several simulations need to be run and the convergence needs to be studied to select an appropriate porosity.
%
\begin{figure}[H]
    \centering
    \subfigure[$\kappa = 10^{-2}$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_porosity_100.eps}
    }
    \quad
    \subfigure[$\kappa = 10^{-3}$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_porosity_1000.eps}
    }
    \\
    \subfigure[$\kappa = 10^{-4}$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_porosity_10000.eps}
    }
    \quad
    \subfigure[$\kappa = 10^{-5}$]
    {
    \includegraphics[width=6.5cm]{Chapter_3/figure/penalization_porosity_100000.eps}
    }
    \caption{Comparison between IB and analytical results for different porosity values.}
    \label{fig:C3_penalizationResultPorosity}
\end{figure}
%
%
\begin{table}[H]
\centering
\begin{tabular}{c | c}
    Porosity (m/s) & RMSE value \\ \hline \hline
    $10^{-2}$ & 0.079 \\ \hline
    $10^{-3}$ & 0.028 \\ \hline
    $10^{-4}$ & 0.01 \\ \hline
    $10^{-5}$ & 0.0056
\end{tabular}
\caption{RMSE values for different porosity values.}
\label{table:C3_penalizationResultPorosityRMSE}
\end{table}
%
The penalization method is probably the easiest one of the continuous IB methods to implement; however, its accuracy is very dependent on the number of nodes used. This is because there are no mechanisms to define the exact location of solid boundaries in the penalization method. This can lead to loss of accuracy and oscillations near the boundaries. The porosity value, $\kappa$, needs to be selected by running multiple simulations and compare the results for convergence. Although, even with low values of porosities, there is a leakage in the solid domain that reduces the accuracy of the simulations.